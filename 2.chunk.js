(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(2);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(37);\nvar react_dom_default = /*#__PURE__*/__webpack_require__.n(react_dom);\n\n// EXTERNAL MODULE: ./node_modules/lodash/floor.js\nvar floor = __webpack_require__(14);\nvar floor_default = /*#__PURE__*/__webpack_require__.n(floor);\n\n// EXTERNAL MODULE: ./node_modules/lodash/get.js\nvar get = __webpack_require__(3);\nvar get_default = /*#__PURE__*/__webpack_require__.n(get);\n\n// EXTERNAL MODULE: ./node_modules/classnames/bind.js\nvar bind = __webpack_require__(17);\nvar bind_default = /*#__PURE__*/__webpack_require__.n(bind);\n\n// EXTERNAL MODULE: ./src/common/types/index.js\nvar types = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./src/apps/achievements/Achievement/Drawer/Drawer.css\nvar Drawer = __webpack_require__(81);\nvar Drawer_default = /*#__PURE__*/__webpack_require__.n(Drawer);\n\n// CONCATENATED MODULE: ./src/apps/achievements/Achievement/Drawer/Drawer.jsx\n\n\n\n\nconst cx = bind_default.a.bind(Drawer_default.a);\nconst Drawer_Drawer = ({\n  children,\n  className = '',\n  initialState = false,\n  style = {}\n} = {}) => {\n  const [open, setOpen] = react_default.a.useState(initialState);\n  return react_default.a.createElement(\"div\", {\n    className: cx('container', {\n      open\n    }, className),\n    style: style\n  }, react_default.a.createElement(\"div\", {\n    className: cx('content', {\n      open\n    })\n  }, children), react_default.a.createElement(\"div\", {\n    \"aria-pressed\": \"false\",\n    className: cx('button', {\n      open\n    }),\n    onClick: () => setOpen(!open),\n    onKeyDown: e => (e.which === 32 || e.which === 13) && setOpen(!open),\n    role: \"button\",\n    tabIndex: \"0\"\n  }, open ? react_default.a.createElement(\"span\", null, \"-\") : react_default.a.createElement(\"span\", null, \"+\")));\n};\n/* harmony default export */ var Achievement_Drawer_Drawer = (Drawer_Drawer);\n// CONCATENATED MODULE: ./src/apps/achievements/Achievement/Drawer/index.js\n\n// CONCATENATED MODULE: ./src/apps/achievements/Achievement/Layout/Card.jsx\n\n\n// Contain the chievements in their normal card view.\nconst Card = ({\n  children,\n  style = {}\n} = {}) => react_default.a.createElement(\"div\", {\n  style: {\n    backgroundColor: 'rgb(240,240,240)',\n    display: 'flex',\n    // Prevent cards from being squished by flex container.\n    flex: '0 0 auto',\n    flexDirection: 'column',\n    height: '8.5rem',\n    justifyContent: 'space-between',\n    margin: '0.3rem',\n    width: '13.8rem',\n    ...style\n  }\n}, children);\n/* harmony default export */ var Layout_Card = (Card);\n// CONCATENATED MODULE: ./src/apps/achievements/Achievement/Layout/Content.jsx\n\n\n// Contain the chievements in their normal card view.\nconst Content = ({\n  children,\n  style = {}\n} = {}) => react_default.a.createElement(\"div\", {\n  style: {\n    padding: '0.5rem',\n    width: '100%',\n    ...style\n  }\n}, children);\n/* harmony default export */ var Layout_Content = (Content);\n// CONCATENATED MODULE: ./src/apps/achievements/Achievement/Layout/ProgressBar.jsx\n\n//\n// Render a progress bar.\nconst ProgressBar = ({\n  color = 'rgb(121,121,121)',\n  progress = 0,\n  style = {}\n} = {}) => react_default.a.createElement(\"div\", {\n  style: {\n    backgroundColor: color,\n    height: '0.5rem',\n    width: `${Math.min(100, Math.floor(progress * 100))}%`,\n    transition: 'all 0.5s',\n    ...style\n  }\n});\n/* harmony default export */ var Layout_ProgressBar = (ProgressBar);\n// CONCATENATED MODULE: ./src/apps/achievements/Achievement/Layout/index.js\n\n\n\n\n/* harmony default export */ var Layout = ({\n  Card: Layout_Card,\n  Content: Layout_Content,\n  ProgressBar: Layout_ProgressBar\n});\n// CONCATENATED MODULE: ./src/apps/achievements/Achievement/index.js\n\n\n/* harmony default export */ var Achievement = ({\n  Drawer: Achievement_Drawer_Drawer,\n  Layout: Layout\n});\n// EXTERNAL MODULE: ./node_modules/lodash/forIn.js\nvar forIn = __webpack_require__(83);\nvar forIn_default = /*#__PURE__*/__webpack_require__.n(forIn);\n\n// EXTERNAL MODULE: ./node_modules/lodash/takeRight.js\nvar takeRight = __webpack_require__(33);\nvar takeRight_default = /*#__PURE__*/__webpack_require__.n(takeRight);\n\n// CONCATENATED MODULE: ./src/apps/achievements/state/events/index.js\n\n\nconst REDUCER_KEY = 'events';\nconst IDS = {\n  UNLOCK_ACHIEVEMENTS: 'unlock-achievements',\n  STAYIN_ALIVE: 'stayin-alive'\n};\nconst CLICK = 'jo/events/click';\nconst events_click = e => ({\n  type: CLICK,\n  payload: e || {}\n});\nconst KEY_DOWN = 'jo/events/key-down';\nconst keyDown = e => ({\n  type: KEY_DOWN,\n  payload: {\n    code: e.which,\n    char: String.fromCharCode(e.which)\n  }\n});\nconst RESET = 'jo/events/reset';\nconst events_reset = () => ({\n  type: RESET\n});\nconst TICK = 'jo/events/tick';\nconst tick = () => ({\n  type: TICK\n});\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case CLICK:\n      return { ...state,\n        clicks: (state.clicks || 0) + 1\n      };\n\n    case KEY_DOWN:\n      return { ...state,\n        keydowns: takeRight_default()([...(state.keydowns || []), action.payload.char], 15)\n      };\n\n    case RESET:\n      return {};\n\n    case TICK:\n      return { ...state,\n        ticks: (state.ticks || 0) + 1\n      };\n\n    default:\n      return state;\n  }\n}; //\n// Selectors\n//\n// Ticks are used throughout, allow access as a number at all times.\n\nconst events_ticks = state => get_default()(state, 'events.ticks', 0);\n// CONCATENATED MODULE: ./src/apps/achievements/state/achievements/index.js\n\n\n\nconst achievements_REDUCER_KEY = 'achievements';\nconst achievements_IDS = {\n  CLICKING_FOR_COOKIES: 'clicking-for-cookies',\n  STAYIN_ALIVE: 'stayin-alive',\n  UNLOCK_ACHIEVEMENTS: 'unlock-achievements',\n  WEB_CRAWLER: 'web-crawler'\n};\nconst ACHIEVEMENTS_ACHIEVED = 'jo/achievements/achieved';\nconst achievements_achieved = id => {\n  return {\n    type: ACHIEVEMENTS_ACHIEVED,\n    payload: {\n      id\n    }\n  };\n};\nconst achievements_reducer = (state = {}, action) => {\n  switch (action.type) {\n    case ACHIEVEMENTS_ACHIEVED:\n      return { ...state,\n        [action.payload.id]: {\n          when: Date.now()\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n/* harmony default export */ var achievements = (achievements_reducer); //\n// Selectors\n//\n\n/**\n * Whether a particular achievement been reported as having been completed or\n * not.\n *\n * `id` can be the actual achievement id or can be a key look up into the\n * achievements `IDS` structure.\n */\n\nconst isAchieved = (state, id) => !!get_default()(state, `${achievements_REDUCER_KEY}.${achievements_IDS[id] || id}`); //\n// Unlocking the achievements makes other achievements available and visible.\n// Provide extra helpers for other parts of the app that need to check on the\n// status of unlocked achievements.\n//\n// How many ticks before the achievements are officially unlocked?\n\nconst UNLOCK_ACHIEVEMENT_REQUIRED_TICKS = 7; //\n// 0 not done, 1 done, anything in between progress.\n\nconst achievements_unlockAchievementsProgress = state => floor_default()(events_ticks(state) / UNLOCK_ACHIEVEMENT_REQUIRED_TICKS, 2);\n// CONCATENATED MODULE: ./src/apps/achievements/state/notifications/index.js\nconst notifications_REDUCER_KEY = 'notifications';\n/**\n * Add a new notification to the end of the notification queue.\n * See: notify\n */\n\nconst ENQUEUE = `jo/${notifications_REDUCER_KEY}/enqueue`;\nfunction enqueue(payload) {\n  if (payload instanceof Error) {\n    // Basic JavaScript errors roughly conform to our needs.\n    payload = {\n      message: payload.message,\n      // explicit typing in our notifications, because someday we might have\n      // error subtleties / error codes so don't assume that an error object\n      // always means just isError.\n      type: 'error'\n    };\n  } else if (typeof payload === 'string') {\n    // Assume it is a string or UI-ish component meant to be displayed as is.\n    payload = {\n      message: payload // other fields on the notification object are extensible and dependent\n      // on the UI handling the notification object.\n\n    };\n  }\n\n  return {\n    type: ENQUEUE,\n    payload\n  };\n}\n/**\n * Add a notification to the end of the queue of notifications.\n *\n * The payload is assumed to be:\n *\n * {\n *    message: {String} passed through to the UI.,\n *    type: {['info'|'error']='info'} type of notification, assumed to affect styling of UI.\n * }\n *\n * @param {Object|String|Error} payload\n * @return {Object} Flux Standard Action\n */\n\nconst notify = enqueue;\n/**\n * Remove a specific item, and all references to it, from the queue.\n *\n * @return {Object} Flux Standard Action\n */\n\nconst REMOVE = `jo/${notifications_REDUCER_KEY}/remove`;\nfunction remove(payload) {\n  return {\n    type: REMOVE,\n    payload\n  };\n}\n/**\n * Remove one item from the head of the queue.\n *\n * @return Flux standard Action\n */\n\nconst DEQUEUE = `jo/${notifications_REDUCER_KEY}/dequeue`;\nfunction dequeue(payload) {\n  return {\n    type: DEQUEUE\n  };\n}\n/**\n * Return the queue to the default state.\n *\n * @return Flux Standard Action\n */\n\nconst notifications_RESET = `jo/${notifications_REDUCER_KEY}/reset`;\nfunction notifications_reset(payload) {\n  return {\n    type: notifications_RESET\n  };\n}\nconst DEFAULT_STATE = [];\nfunction notifications_reducer(state = DEFAULT_STATE, action = {}) {\n  switch (action.type) {\n    case DEQUEUE:\n      return state.slice(1);\n\n    case ENQUEUE:\n      return state.concat(action.payload);\n\n    case REMOVE:\n      return state.filter(notification => notification !== action.payload);\n\n    case notifications_RESET:\n      return DEFAULT_STATE;\n\n    default:\n      return state;\n  }\n}\n/* harmony default export */ var notifications = (notifications_reducer);\n// CONCATENATED MODULE: ./src/common/not-redux/index.js\n\nconst notReduxState = {\n  key: 'something something something in the month of may'\n};\nconst NotRedux = react_default.a.createContext({\n  state: notReduxState,\n  dispatch: () => console.warn('non-initialized dispatch being called')\n}); // By default export the context, which is what people want.\n// Not a horrid expectation given `import React from 'react'`.\n\n/* harmony default export */ var not_redux = (NotRedux);\n// CONCATENATED MODULE: ./src/apps/achievements/state/index.js\n\n\n\n\n\n\n // All sub-state reducers must be added here.\n\nconst _reducerRegistry = {\n  [achievements_REDUCER_KEY]: achievements_reducer,\n  [REDUCER_KEY]: reducer,\n  [notifications_REDUCER_KEY]: notifications_reducer\n};\nconst state_reducer = (state, action) => {\n  // Root reducer specialties\n  switch (action.type) {\n    case 'reset':\n      return {};\n\n    case 'set':\n      return state.payload;\n\n    default:\n      break;\n  }\n\n  let subStateChanged = false;\n  const subStateDiff = {};\n\n  forIn_default()(_reducerRegistry, (r, key) => {\n    const subState = get_default()(state, key); // || undefined as states can be more than objects\n\n\n    const nextSubState = r(subState, action);\n\n    if (nextSubState !== subState) {\n      subStateChanged = true;\n      subStateDiff[key] = nextSubState;\n    }\n  });\n\n  if (subStateChanged) {\n    state = { ...state,\n      ...subStateDiff\n    };\n  }\n\n  return state;\n};\n/* harmony default export */ var achievements_state = (state_reducer);\nconst AppState = NotRedux;\nconst useAppState = () => react_default.a.useContext(AppState);\n// CONCATENATED MODULE: ./src/apps/achievements/Achievements/ClickingForCookies.jsx\n\n\n\n\n\n\n // Work for this one, sort of ;)\n\nconst NUM_CLICKS_FOR_THAT_COOKIE = 200;\nconst ClickingForCookies = () => {\n  const {\n    dispatch,\n    state\n  } = useAppState();\n  const ACHIEVEMENT_ID = achievements_IDS.CLICKING_FOR_COOKIES;\n  const achieved = isAchieved(state, ACHIEVEMENT_ID);\n  const clicks = get_default()(state, 'events.clicks') || 0;\n\n  const progress = floor_default()(clicks / NUM_CLICKS_FOR_THAT_COOKIE, 2);\n\n  react_default.a.useEffect(() => {\n    if (achieved) {\n      return;\n    }\n\n    if (progress >= 1) {\n      dispatch(achievements_achieved(ACHIEVEMENT_ID));\n      dispatch(notify('Achievement unlocked: Clicking for Cookies! (Have a cookie, you deserve it.)'));\n    }\n  }, [ACHIEVEMENT_ID, achieved, dispatch, progress]);\n  return react_default.a.createElement(Achievement.Layout.Card, null, react_default.a.createElement(Achievement.Layout.Content, null, achieved ? react_default.a.createElement(\"div\", null, \"Clicking for Cookies unlocked! (And this one doesn't need a banner.)\") : react_default.a.createElement(\"div\", null, \"Cookies aren't just for eating or tracking...\", progress >= 0.3 ? ' I believe in you!' : '', \" \", progress >= 0.7 ? ' Almost there!' : '')), react_default.a.createElement(Achievement.Layout.ProgressBar, {\n    progress: progress\n  }));\n};\n/* harmony default export */ var Achievements_ClickingForCookies = (ClickingForCookies);\n// EXTERNAL MODULE: ./node_modules/lodash/take.js\nvar take = __webpack_require__(99);\nvar take_default = /*#__PURE__*/__webpack_require__.n(take);\n\n// EXTERNAL MODULE: ./node_modules/lodash/forEach.js\nvar forEach = __webpack_require__(35);\nvar forEach_default = /*#__PURE__*/__webpack_require__.n(forEach);\n\n// CONCATENATED MODULE: ./src/apps/achievements/Achievements/StayinAlive.jsx\n\n\n\n\n\n\n\n\n\n\nconst ACHIEVEMENT_CODE = [String.fromCharCode(38), // up\nString.fromCharCode(38), // up\nString.fromCharCode(40), // down\nString.fromCharCode(40), // down\nString.fromCharCode(37), // left\nString.fromCharCode(39), // right\nString.fromCharCode(37), // left\nString.fromCharCode(39), // right\n'B', 'A']; // Calculate progress of the string dependent on the longest correct sequence\n// of keys from the end of the input keys.\n\nconst StayinAlive_matches = (a, b) => {\n  let matches = 0;\n  let valid = true;\n\n  forEach_default()(a, (code, index) => {\n    if (!valid) {\n      return;\n    }\n\n    if (code === b[index]) {\n      matches += 1;\n    } else {\n      valid = false;\n    }\n  });\n\n  return valid ? matches : false;\n};\n\nconst calcLongestMatch = (a, b) => {\n  let longestMatch = 0;\n  const size = Math.min(a.length, b.length);\n\n  for (let i = size; i > 0; i--) {\n    const num = StayinAlive_matches(take_default()(a, i), takeRight_default()(b, i));\n\n    if (num) {\n      longestMatch = num;\n      break;\n    }\n  }\n\n  return longestMatch;\n};\n\nconst StayinAlive = () => {\n  const {\n    dispatch,\n    state\n  } = useAppState();\n  const [progress, setProgress] = react_default.a.useState(0);\n  const ACHIEVEMENT_ID = achievements_IDS.STAYIN_ALIVE;\n  const achieved = get_default()(state, `achievements.${ACHIEVEMENT_ID}`) || false;\n\n  const keys = takeRight_default()(get_default()(state, 'events.keydowns') || [], ACHIEVEMENT_CODE.length);\n\n  react_default.a.useEffect(() => {\n    if (achieved) {\n      return;\n    }\n\n    const progress = floor_default()(calcLongestMatch(ACHIEVEMENT_CODE, keys) / ACHIEVEMENT_CODE.length, 2);\n\n    setProgress(progress);\n\n    if (progress === 1) {\n      dispatch(achievements_achieved(ACHIEVEMENT_ID));\n      dispatch(notify('Achievement unlocked: Stayin\\' Alive'));\n    }\n  }, [ACHIEVEMENT_ID, achieved, dispatch, keys]);\n  return react_default.a.createElement(Achievement.Layout.Card, null, react_default.a.createElement(Achievement.Layout.Content, null, achieved ? react_default.a.createElement(\"div\", null, \"Stayin' Alive (with cheat codes) unlocked!\") : react_default.a.createElement(\"div\", null, \"You know the code...\")), react_default.a.createElement(Achievement.Layout.ProgressBar, {\n    progress: progress\n  }));\n};\n/* harmony default export */ var Achievements_StayinAlive = (StayinAlive);\n// CONCATENATED MODULE: ./src/apps/achievements/Achievements/UnlockAchievements.jsx\n\n\n\n\n\nconst UnlockAchievements = () => {\n  const {\n    dispatch,\n    state\n  } = useAppState();\n  const ACHIEVEMENT_ID = achievements_IDS.UNLOCK_ACHIEVEMENTS;\n  const achieved = isAchieved(state, ACHIEVEMENT_ID) || false; // Cap progress at 1 since we display it.\n\n  const progress = achievements_unlockAchievementsProgress(state);\n  react_default.a.useEffect(() => {\n    if (achieved) {\n      return;\n    }\n\n    if (progress >= 1) {\n      dispatch(achievements_achieved(ACHIEVEMENT_ID));\n      dispatch(notify('Achievements unlocked! Maybe you can find more achievements?'));\n    }\n  }, [ACHIEVEMENT_ID, achieved, dispatch, progress]);\n  return react_default.a.createElement(Achievement.Layout.Card, null, react_default.a.createElement(Achievement.Layout.Content, null, achieved ? react_default.a.createElement(\"div\", null, \"Unlock Achievements unlocked!\") : react_default.a.createElement(\"div\", null, \"Wait for it...\")), react_default.a.createElement(Achievement.Layout.ProgressBar, {\n    progress: progress\n  }));\n};\n/* harmony default export */ var Achievements_UnlockAchievements = (UnlockAchievements);\n// CONCATENATED MODULE: ./src/apps/achievements/Achievements/WebCrawler.jsx\n\n\n\n //\n// Did you click a link?\n//\n// This achievement will likely be triggered before the waiting.\n//\n\nconst WebCrawler = () => {\n  const {\n    state\n  } = useAppState();\n  const ACHIEVEMENT_ID = achievements_IDS.WEB_CRAWLER; // This achievement is either achieved or not and conditions for achievement\n  // success is handled in the EventListener since our NotRedux doesn't have\n  // middleware.\n\n  const achieved = isAchieved(state, ACHIEVEMENT_ID);\n  const progress = achieved ? 1 : 0;\n  return react_default.a.createElement(Achievement.Layout.Card, null, react_default.a.createElement(Achievement.Layout.Content, null, achieved ? react_default.a.createElement(\"div\", null, \"Web Crawler unlocked!\") : react_default.a.createElement(\"div\", null, \"What would the web crawler do?\")), react_default.a.createElement(Achievement.Layout.ProgressBar, {\n    progress: progress\n  }));\n};\n/* harmony default export */ var Achievements_WebCrawler = (WebCrawler);\n// CONCATENATED MODULE: ./src/apps/achievements/Achievements/index.js\n\n\n\n\n/* harmony default export */ var Achievements = ({\n  ClickingForCookies: Achievements_ClickingForCookies,\n  StayinAlive: Achievements_StayinAlive,\n  UnlockAchievements: Achievements_UnlockAchievements,\n  WebCrawler: Achievements_WebCrawler\n});\n// CONCATENATED MODULE: ./src/common/developer/DeveloperModeOnly.jsx\n\n// Take an object, seralize it, and show it in all its dataful glory.\nconst DeveloperModeOnly = ({\n  children\n} = {}) => {\n  return  false ? undefined : null;\n};\n/* harmony default export */ var developer_DeveloperModeOnly = (DeveloperModeOnly);\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(108);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// CONCATENATED MODULE: ./src/common/developer/JSONView.jsx\n\n\n\n// Take an object, seralize it, and show it in all its dataful glory.\nconst JSONView = ({\n  className = '',\n  data = {},\n  style = {}\n} = {}) => {\n  return react_default.a.createElement(\"pre\", {\n    className: classnames_default()(className),\n    style: style\n  }, JSON.stringify(data, null, 4));\n};\n/* harmony default export */ var developer_JSONView = (JSONView);\n// CONCATENATED MODULE: ./src/common/developer/index.js\n\n\n// EXTERNAL MODULE: ./src/apps/achievements/AppStateView/AppStateView.css\nvar AppStateView = __webpack_require__(109);\nvar AppStateView_default = /*#__PURE__*/__webpack_require__.n(AppStateView);\n\n// CONCATENATED MODULE: ./src/apps/achievements/AppStateView/AppStateView.jsx\n\n\n\n\n\nconst AppStateView_cx = bind_default.a.bind(AppStateView_default.a); // Debug view. Hidden from production builds.\n\nconst AppStateView_AppStateView = () => {\n  const {\n    state\n  } = useAppState();\n  const [open, setOpen] = react_default.a.useState(false);\n  const dynamicClasses = {\n    open\n  };\n  return react_default.a.createElement(developer_DeveloperModeOnly, null, react_default.a.createElement(\"div\", {\n    className: AppStateView_cx('container', dynamicClasses)\n  }, open ? react_default.a.createElement(react_default.a.Fragment, null, react_default.a.createElement(\"div\", null, react_default.a.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setOpen(!open)\n  }, \"hide state\")), react_default.a.createElement(developer_JSONView, {\n    data: state\n  })) : react_default.a.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setOpen(!open)\n  }, \"show state\")));\n};\n/* harmony default export */ var achievements_AppStateView_AppStateView = (AppStateView_AppStateView);\n// CONCATENATED MODULE: ./src/apps/achievements/AppStateView/index.js\n\n// CONCATENATED MODULE: ./src/apps/achievements/EventListener.jsx\n\n\n\n\n\n //\n// Non-visual component that listens for events we care about and publishes\n// NotRedux actions.\n//\n\nconst EventListener = () => {\n  const {\n    state,\n    dispatch\n  } = useAppState(); // Isolate the the WebCrawler achievment handling.\n  // Also, we are handling this achievement here vs. in the controller vs.\n  // lack of middleware.\n\n  react_default.a.useEffect(() => {\n    const click = e => {\n      const ACHIEVEMENT_ID = achievements_IDS.WEB_CRAWLER;\n      const isWebCrawlerCandidate = e.target.getAttribute('data-app') === 'social-link';\n\n      if (isWebCrawlerCandidate) {\n        // Have we already achieved web crawler?\n        if (!isAchieved(state, ACHIEVEMENT_ID)) {\n          dispatch(achievements_achieved(ACHIEVEMENT_ID));\n          dispatch(notify('Achievement unlocked: Yes, that is what the web crawler would do.'));\n        }\n      }\n    };\n\n    window.addEventListener('click', click, false);\n    return () => {\n      window.removeEventListener('click', click, false);\n    };\n  }, [state, dispatch]);\n  react_default.a.useEffect(() => {\n    const eventMap = {\n      click: e => dispatch(events_click(e)),\n      keydown: e => dispatch(keyDown(e))\n    };\n\n    forEach_default()(eventMap, (eventListener, eventName) => {\n      window.addEventListener(eventName, eventListener, false);\n    }); // Ticks need a regular interval.\n\n\n    const tickIntervalId = setInterval(() => {\n      dispatch(tick());\n    }, 1000); // Specify how to clean up after this effect:\n\n    return () => {\n      forEach_default()(eventMap, (eventListener, eventName) => {\n        window.removeEventListener(eventName, eventListener, false);\n      });\n\n      clearInterval(tickIntervalId);\n    };\n  }, [dispatch]); // Only run on mount and dismount.\n\n  return react_default.a.createElement(\"div\", null);\n};\n/* harmony default export */ var achievements_EventListener = (EventListener);\n// EXTERNAL MODULE: ./src/apps/achievements/Notifier/Notification.css\nvar Notification = __webpack_require__(111);\nvar Notification_default = /*#__PURE__*/__webpack_require__.n(Notification);\n\n// CONCATENATED MODULE: ./src/apps/achievements/Notifier/Notification.jsx\n\n\n\n\n\nconst Notification_cx = bind_default.a.bind(Notification_default.a);\n// Always visible. Control whether this should be shown or not in containing elements.\nconst Notification_Notification = ({\n  className = '',\n  notification,\n  onClose,\n  style = {}\n} = {}) => {\n  return react_default.a.createElement(\"div\", {\n    className: Notification_cx('notification', get_default()(notification, 'type', 'info'), className),\n    style: style\n  }, react_default.a.createElement(\"div\", {\n    className: Notification_cx('message')\n  }, get_default()(notification, 'message')), react_default.a.createElement(\"button\", {\n    className: Notification_cx('close'),\n    onClick: () => onClose(notification)\n  }, \"Close\"));\n};\n/* harmony default export */ var Notifier_Notification = (Notification_Notification);\n// CONCATENATED MODULE: ./src/apps/achievements/Notifier/Notifier.jsx\n\n\n\n\n\nconst Notifier = () => {\n  const {\n    state,\n    dispatch\n  } = useAppState();\n\n  const notification = get_default()(state, 'notifications[0]');\n\n  return notification ? react_default.a.createElement(Notifier_Notification, {\n    notification: notification,\n    onClose: (...args) => dispatch(remove(...args))\n  }) : null;\n};\n/* harmony default export */ var Notifier_Notifier = (Notifier);\n// CONCATENATED MODULE: ./src/apps/achievements/Notifier/index.js\n\n// CONCATENATED MODULE: ./src/apps/achievements/PersistState.jsx\n\n\n\n//\n// Non-visual component that will write the state to disk periodically.\n//\n// No one wants to lose their achievement progress ;)\n//\nconst PersistState = ({\n  interval = 3\n}) => {\n  const {\n    state\n  } = useAppState();\n  const ticks = events_ticks(state);\n  react_default.a.useEffect(() => {\n    if (ticks && ticks % interval === 0) {\n      window.localStorage['jwo-achievements'] = JSON.stringify(state);\n    }\n  }, [state, ticks, interval]);\n  return react_default.a.createElement(\"div\", null);\n};\n/* harmony default export */ var achievements_PersistState = (PersistState);\n// CONCATENATED MODULE: ./src/apps/achievements/App.jsx\n\n\n\n\n\n\n\n\n //\n// Root component for the achievements application.\n//\n// All top level components should be defined here and this component is\n// assumed to be `ReactDOM.render`ed in another component.\n//\n// This component gets wrapped in a mount function and exported in the module\n// `index.js`.\n//\n\nconst App = () => {\n  let initialState;\n\n  try {\n    // See PersistState for how the data gets saved.\n    initialState = JSON.parse(window.localStorage['jwo-achievements'] || '{}');\n  } catch (err) {\n    console.warn('Could not read value stored for achievements state. Reverting to empty initial state.');\n    initialState = {};\n  }\n\n  const [state, dispatch] = react_default.a.useReducer(state_reducer, initialState); // We show two different views depending on whether the first achievement has\n  // been unlocked or not.\n\n  const unlockAchievements = isAchieved(state, achievements_IDS.UNLOCK_ACHIEVEMENTS);\n  const unlockAchievementsProgress = achievements_unlockAchievementsProgress(state);\n  const clickingForCookiesAchieved = isAchieved(state, achievements_IDS.CLICKING_FOR_COOKIES);\n  return react_default.a.createElement(AppState.Provider, {\n    value: {\n      state,\n      dispatch\n    }\n  }, react_default.a.createElement(achievements_EventListener, null), react_default.a.createElement(achievements_AppStateView_AppStateView, null), react_default.a.createElement(achievements_PersistState, null), react_default.a.createElement(Notifier_Notifier, null), clickingForCookiesAchieved ? react_default.a.createElement(\"a\", {\n    href: \"https://orteil.dashnet.org/cookieclicker/\",\n    rel: \"external noopener noreferrer\",\n    target: \"_blank\",\n    title: \"go click some cookies\"\n  }, react_default.a.createElement(\"img\", {\n    alt: \"cookie\",\n    src: \"cookie-for-clicking.png\",\n    style: {\n      height: 243,\n      // original height = 487\n      position: 'absolute',\n      right: 15,\n      top: 200,\n      width: 250,\n      // original width = 500\n      zIndex: -1\n    }\n  })) : null, react_default.a.createElement(\"div\", {\n    style: {\n      bottom: 0,\n      left: 0,\n      position: 'fixed',\n      // The components manage their achievability, so they need to be\n      // mounted in the page (display: none no workee).\n      visibility: unlockAchievements ? 'visible' : 'hidden',\n      width: '100%'\n    }\n  }, react_default.a.createElement(Achievement.Drawer, null, react_default.a.createElement(Achievements.UnlockAchievements, null), react_default.a.createElement(Achievements.StayinAlive, null), react_default.a.createElement(Achievements.WebCrawler, null), react_default.a.createElement(Achievements.ClickingForCookies, null))), react_default.a.createElement(\"div\", {\n    style: {\n      bottom: 0,\n      display: unlockAchievements ? 'none' : 'block',\n      left: 0,\n      position: 'fixed',\n      width: '100%'\n    }\n  }, unlockAchievements ? null : react_default.a.createElement(Achievement.Layout.ProgressBar, {\n    progress: unlockAchievementsProgress\n  })));\n};\n/* harmony default export */ var achievements_App = (App);\n// CONCATENATED MODULE: ./src/apps/achievements/index.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main\", function() { return main; });\n\n\n //\n// int main(void) for the achievements application.\n// Import and run.\n//\n\nconst main = ({\n  rootId = 'achievements'\n} = {}) => {\n  let root = document.getElementById(rootId);\n\n  if (!root) {\n    root = document.createElement('div');\n    root.id = rootId;\n    document.body.appendChild(root);\n  }\n\n  react_dom_default.a.render(react_default.a.createElement(achievements_App, null), root);\n};\n/* harmony default export */ var apps_achievements = __webpack_exports__[\"default\"] = (main);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},109:function(module,exports,__webpack_require__){eval("var content = __webpack_require__(110);\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(19)(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9hY2hpZXZlbWVudHMvQXBwU3RhdGVWaWV3L0FwcFN0YXRlVmlldy5jc3M/OWFkYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsR0FBOEk7O0FBRXBLO0FBQ0EsY0FBYyxRQUFTO0FBQ3ZCOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLEVBQWlGOztBQUV0RztBQUNBO0FBQ0EiLCJmaWxlIjoiMTA5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS00LTEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cG9zdGNzcyEuL0FwcFN0YXRlVmlldy5jc3NcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///109\n")},110:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(18)(false);\n// Module\nexports.push([module.i, ".uLjP1nauJDLcyXLiSllbh {\\n  /** This location is just a guess. Restyle if needed. */\\n  position: fixed;\\n  right: 0;\\n  top: 0;\\n  padding: 1rem;\\n}\\n", ""]);\n// Exports\nexports.locals = {\n\t"container": "uLjP1nauJDLcyXLiSllbh"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9hY2hpZXZlbWVudHMvQXBwU3RhdGVWaWV3L0FwcFN0YXRlVmlldy5jc3M/OGI5ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxFQUF5RDtBQUM1RjtBQUNBLGNBQWMsUUFBUywyQkFBMkIsZ0ZBQWdGLGFBQWEsV0FBVyxrQkFBa0IsR0FBRztBQUMvSztBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi51TGpQMW5hdUpETGN5WExpU2xsYmgge1xcbiAgLyoqIFRoaXMgbG9jYXRpb24gaXMganVzdCBhIGd1ZXNzLiBSZXN0eWxlIGlmIG5lZWRlZC4gKi9cXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwO1xcbiAgcGFkZGluZzogMXJlbTtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcInVMalAxbmF1SkRMY3lYTGlTbGxiaFwiXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///110\n')},111:function(module,exports,__webpack_require__){eval("var content = __webpack_require__(112);\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(19)(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9hY2hpZXZlbWVudHMvTm90aWZpZXIvTm90aWZpY2F0aW9uLmNzcz85YWE1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxHQUE4STs7QUFFcEs7QUFDQSxjQUFjLFFBQVM7QUFDdkI7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsRUFBaUY7O0FBRXRHO0FBQ0E7QUFDQSIsImZpbGUiOiIxMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9wb3N0Y3NzIS4vTm90aWZpY2F0aW9uLmNzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///111\n")},112:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(18)(false);\n// Module\nexports.push([module.i, "._1oz1EPnKamj2WWYfTu3caT {\\n  -webkit-box-align: center;\\n          align-items: center;\\n  box-sizing: border-box;\\n\\n  display: -webkit-box;\\n\\n  display: flex;\\n  justify-content: space-around;\\n  padding: 1em;\\n\\n  position: fixed;\\n  top: 1em;\\n  left: 3em;\\n  right: 3em;\\n}\\n\\n/* Styling for specific notification types. */\\n._1oz1EPnKamj2WWYfTu3caT._27nY54s99pym6p_Lj6VeM- {\\n  background-color: #e6d963;\\n  color: black;\\n}\\n._1oz1EPnKamj2WWYfTu3caT.J_mM_4iinPGx217iBIn7n {\\n  background-color: #c51162;\\n  color: white;\\n}\\n\\n@media (max-width: 768px) {\\n  ._1oz1EPnKamj2WWYfTu3caT {\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n  }\\n}\\n\\n._3JiSC0xqNs914ukxV_WK1Y {\\n  width: 80%;\\n}\\n\\n._2jNLAHJdVuBWFSxl-XW6Yt {\\n  /* Button reset */\\n  border: none;\\n  margin: 0;\\n  /* padding: 0; */\\n  width: auto;\\n  overflow: visible;\\n  background: transparent;\\n  /* inherit font & color from ancestor */\\n  color: inherit;\\n  font: inherit;\\n  /* Normalize `line-height`. Cannot be changed from `normal` in Firefox 4+. */\\n  line-height: normal;\\n  /* Corrects font smoothing for webkit */\\n  -webkit-font-smoothing: inherit;\\n  -moz-osx-font-smoothing: inherit;\\n  /* Corrects inability to style clickable `input` types in iOS */\\n  -webkit-appearance: none;\\n  /* end Button reset */\\n\\n  color: #575757;\\n  display: inline-block;\\n  font-family: sans-serif;\\n  font-weight: bold;\\n  font-size: 0.8em;\\n  padding: 0.3em;\\n  text-transform: uppercase;\\n  max-width: 20%;\\n}\\n\\n.J_mM_4iinPGx217iBIn7n ._2jNLAHJdVuBWFSxl-XW6Yt {\\n  color: white;\\n}\\n", ""]);\n// Exports\nexports.locals = {\n\t"notification": "_1oz1EPnKamj2WWYfTu3caT",\n\t"info": "_27nY54s99pym6p_Lj6VeM-",\n\t"error": "J_mM_4iinPGx217iBIn7n",\n\t"message": "_3JiSC0xqNs914ukxV_WK1Y",\n\t"close": "_2jNLAHJdVuBWFSxl-XW6Yt"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9hY2hpZXZlbWVudHMvTm90aWZpZXIvTm90aWZpY2F0aW9uLmNzcz9jZDk0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLEVBQXlEO0FBQzVGO0FBQ0EsY0FBYyxRQUFTLDZCQUE2Qiw4QkFBOEIsZ0NBQWdDLDJCQUEyQiwyQkFBMkIsb0JBQW9CLGtDQUFrQyxpQkFBaUIsc0JBQXNCLGFBQWEsY0FBYyxlQUFlLEdBQUcsc0dBQXNHLDhCQUE4QixpQkFBaUIsR0FBRyxrREFBa0QsOEJBQThCLGlCQUFpQixHQUFHLCtCQUErQiw4QkFBOEIsYUFBYSxjQUFjLGVBQWUsS0FBSyxHQUFHLDhCQUE4QixlQUFlLEdBQUcsOEJBQThCLHVDQUF1QyxjQUFjLGtCQUFrQixtQkFBbUIsc0JBQXNCLDRCQUE0QiwrREFBK0Qsa0JBQWtCLHlHQUF5RyxnRkFBZ0YscUNBQXFDLGlHQUFpRywrQ0FBK0MsMEJBQTBCLDRCQUE0QixzQkFBc0IscUJBQXFCLG1CQUFtQiw4QkFBOEIsbUJBQW1CLEdBQUcscURBQXFELGlCQUFpQixHQUFHO0FBQ3ZpRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjExMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLl8xb3oxRVBuS2FtajJXV1lmVHUzY2FUIHtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcblxcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICBwYWRkaW5nOiAxZW07XFxuXFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDFlbTtcXG4gIGxlZnQ6IDNlbTtcXG4gIHJpZ2h0OiAzZW07XFxufVxcblxcbi8qIFN0eWxpbmcgZm9yIHNwZWNpZmljIG5vdGlmaWNhdGlvbiB0eXBlcy4gKi9cXG4uXzFvejFFUG5LYW1qMldXWWZUdTNjYVQuXzI3blk1NHM5OXB5bTZwX0xqNlZlTS0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZDk2MztcXG4gIGNvbG9yOiBibGFjaztcXG59XFxuLl8xb3oxRVBuS2FtajJXV1lmVHUzY2FULkpfbU1fNGlpblBHeDIxN2lCSW43biB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzUxMTYyO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5fMW96MUVQbkthbWoyV1dZZlR1M2NhVCB7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICB9XFxufVxcblxcbi5fM0ppU0MweHFOczkxNHVreFZfV0sxWSB7XFxuICB3aWR0aDogODAlO1xcbn1cXG5cXG4uXzJqTkxBSEpkVnVCV0ZTeGwtWFc2WXQge1xcbiAgLyogQnV0dG9uIHJlc2V0ICovXFxuICBib3JkZXI6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICAvKiBwYWRkaW5nOiAwOyAqL1xcbiAgd2lkdGg6IGF1dG87XFxuICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgLyogaW5oZXJpdCBmb250ICYgY29sb3IgZnJvbSBhbmNlc3RvciAqL1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBmb250OiBpbmhlcml0O1xcbiAgLyogTm9ybWFsaXplIGBsaW5lLWhlaWdodGAuIENhbm5vdCBiZSBjaGFuZ2VkIGZyb20gYG5vcm1hbGAgaW4gRmlyZWZveCA0Ky4gKi9cXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XFxuICAvKiBDb3JyZWN0cyBmb250IHNtb290aGluZyBmb3Igd2Via2l0ICovXFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBpbmhlcml0O1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGluaGVyaXQ7XFxuICAvKiBDb3JyZWN0cyBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIGBpbnB1dGAgdHlwZXMgaW4gaU9TICovXFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAvKiBlbmQgQnV0dG9uIHJlc2V0ICovXFxuXFxuICBjb2xvcjogIzU3NTc1NztcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDAuOGVtO1xcbiAgcGFkZGluZzogMC4zZW07XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgbWF4LXdpZHRoOiAyMCU7XFxufVxcblxcbi5KX21NXzRpaW5QR3gyMTdpQkluN24gLl8yak5MQUhKZFZ1QldGU3hsLVhXNll0IHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcIm5vdGlmaWNhdGlvblwiOiBcIl8xb3oxRVBuS2FtajJXV1lmVHUzY2FUXCIsXG5cdFwiaW5mb1wiOiBcIl8yN25ZNTRzOTlweW02cF9MajZWZU0tXCIsXG5cdFwiZXJyb3JcIjogXCJKX21NXzRpaW5QR3gyMTdpQkluN25cIixcblx0XCJtZXNzYWdlXCI6IFwiXzNKaVNDMHhxTnM5MTR1a3hWX1dLMVlcIixcblx0XCJjbG9zZVwiOiBcIl8yak5MQUhKZFZ1QldGU3hsLVhXNll0XCJcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///112\n')},6:function(module,exports){eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n")},81:function(module,exports,__webpack_require__){eval("var content = __webpack_require__(82);\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(19)(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9hY2hpZXZlbWVudHMvQWNoaWV2ZW1lbnQvRHJhd2VyL0RyYXdlci5jc3M/MDRiMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsRUFBOEk7O0FBRXBLO0FBQ0EsY0FBYyxRQUFTO0FBQ3ZCOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLEVBQW9GOztBQUV6RztBQUNBO0FBQ0EiLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9wb3N0Y3NzIS4vRHJhd2VyLmNzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///81\n")},82:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(18)(false);\n// Module\nexports.push([module.i, ".Uw8D0Ody-RAVwTelXpZl0 {\\n  -webkit-box-align: center;\\n          align-items: center;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-pack: justify;\\n          justify-content: space-between;\\n  /* This is achievement specific, not a very generalized drawer. */\\n  min-height: 9rem;\\n  position: relative;\\n  -webkit-transition: width 0.25s ease-out;\\n  transition: width 0.25s ease-out;\\n  width: 0;\\n}\\n\\n.Uw8D0Ody-RAVwTelXpZl0._2I-uzjJZT65vQKUw_sk93s {\\n  width: 100%;\\n}\\n\\n._3xRf-zpxwi3eRPt1GFIetV {\\n  display: -webkit-box;\\n  display: flex;\\n  overflow-x: scroll;\\n  -webkit-transition: width 0.25s ease-out;\\n  transition: width 0.25s ease-out;\\n  width: 0;\\n}\\n\\n._3xRf-zpxwi3eRPt1GFIetV._2I-uzjJZT65vQKUw_sk93s {\\n  width: 100%;\\n}\\n\\n/* When !open, button is edged into view on the left side from the closed drawer. */\\n._3taC9g-6LqQ3KKt37JOWNc {\\n  -webkit-box-align: center;\\n          align-items: center;\\n  background-color: rgb(33,33,33);\\n  border-radius: 0 100% 100% 0;\\n  color: rgb(255,255,255);\\n  display: -webkit-box;\\n  display: flex;\\n  height: 4.6rem;\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n  right: -2.83rem; /* Visible relative to width of button. */\\n  position: absolute;\\n  width: 2.83rem;\\n}\\n._3taC9g-6LqQ3KKt37JOWNc._2I-uzjJZT65vQKUw_sk93s {\\n  border-radius: 100% 0 0 100%;\\n  position: static;\\n}\\n", ""]);\n// Exports\nexports.locals = {\n\t"container": "Uw8D0Ody-RAVwTelXpZl0",\n\t"open": "_2I-uzjJZT65vQKUw_sk93s",\n\t"content": "_3xRf-zpxwi3eRPt1GFIetV",\n\t"button": "_3taC9g-6LqQ3KKt37JOWNc"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9hY2hpZXZlbWVudHMvQWNoaWV2ZW1lbnQvRHJhd2VyL0RyYXdlci5jc3M/MGIzMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxFQUE0RDtBQUMvRjtBQUNBLGNBQWMsUUFBUywyQkFBMkIsOEJBQThCLGdDQUFnQyx5QkFBeUIsa0JBQWtCLDhCQUE4QiwyQ0FBMkMsMkZBQTJGLHVCQUF1Qiw2Q0FBNkMscUNBQXFDLGFBQWEsR0FBRyxvREFBb0QsZ0JBQWdCLEdBQUcsOEJBQThCLHlCQUF5QixrQkFBa0IsdUJBQXVCLDZDQUE2QyxxQ0FBcUMsYUFBYSxHQUFHLHNEQUFzRCxnQkFBZ0IsR0FBRyxvSEFBb0gsOEJBQThCLGdDQUFnQyxvQ0FBb0MsaUNBQWlDLDRCQUE0Qix5QkFBeUIsa0JBQWtCLG1CQUFtQiw2QkFBNkIsb0NBQW9DLG9CQUFvQixrRUFBa0UsbUJBQW1CLEdBQUcsb0RBQW9ELGlDQUFpQyxxQkFBcUIsR0FBRztBQUNyM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5VdzhEME9keS1SQVZ3VGVsWHBabDAge1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGp1c3RpZnk7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIC8qIFRoaXMgaXMgYWNoaWV2ZW1lbnQgc3BlY2lmaWMsIG5vdCBhIHZlcnkgZ2VuZXJhbGl6ZWQgZHJhd2VyLiAqL1xcbiAgbWluLWhlaWdodDogOXJlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMC4yNXMgZWFzZS1vdXQ7XFxuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjI1cyBlYXNlLW91dDtcXG4gIHdpZHRoOiAwO1xcbn1cXG5cXG4uVXc4RDBPZHktUkFWd1RlbFhwWmwwLl8ySS11empKWlQ2NXZRS1V3X3NrOTNzIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uXzN4UmYtenB4d2kzZVJQdDFHRklldFYge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgb3ZlcmZsb3cteDogc2Nyb2xsO1xcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiB3aWR0aCAwLjI1cyBlYXNlLW91dDtcXG4gIHRyYW5zaXRpb246IHdpZHRoIDAuMjVzIGVhc2Utb3V0O1xcbiAgd2lkdGg6IDA7XFxufVxcblxcbi5fM3hSZi16cHh3aTNlUlB0MUdGSWV0Vi5fMkktdXpqSlpUNjV2UUtVd19zazkzcyB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLyogV2hlbiAhb3BlbiwgYnV0dG9uIGlzIGVkZ2VkIGludG8gdmlldyBvbiB0aGUgbGVmdCBzaWRlIGZyb20gdGhlIGNsb3NlZCBkcmF3ZXIuICovXFxuLl8zdGFDOWctNkxxUTNLS3QzN0pPV05jIHtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMzMsMzMsMzMpO1xcbiAgYm9yZGVyLXJhZGl1czogMCAxMDAlIDEwMCUgMDtcXG4gIGNvbG9yOiByZ2IoMjU1LDI1NSwyNTUpO1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiA0LjZyZW07XFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgcmlnaHQ6IC0yLjgzcmVtOyAvKiBWaXNpYmxlIHJlbGF0aXZlIHRvIHdpZHRoIG9mIGJ1dHRvbi4gKi9cXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAyLjgzcmVtO1xcbn1cXG4uXzN0YUM5Zy02THFRM0tLdDM3Sk9XTmMuXzJJLXV6akpaVDY1dlFLVXdfc2s5M3Mge1xcbiAgYm9yZGVyLXJhZGl1czogMTAwJSAwIDAgMTAwJTtcXG4gIHBvc2l0aW9uOiBzdGF0aWM7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJjb250YWluZXJcIjogXCJVdzhEME9keS1SQVZ3VGVsWHBabDBcIixcblx0XCJvcGVuXCI6IFwiXzJJLXV6akpaVDY1dlFLVXdfc2s5M3NcIixcblx0XCJjb250ZW50XCI6IFwiXzN4UmYtenB4d2kzZVJQdDFHRklldFZcIixcblx0XCJidXR0b25cIjogXCJfM3RhQzlnLTZMcVEzS0t0MzdKT1dOY1wiXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///82\n')}}]);